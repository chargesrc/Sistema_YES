/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interfaces;
import clase.Horario;
import static interfaces.abmPrincipal.panelA;
import java.awt.Dimension;
import java.sql.Connection;
import java.sql.ResultSet;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.ERROR_MESSAGE;
import static javax.swing.JOptionPane.WARNING_MESSAGE;

/**
 *
 * @author joni
 */
public class abmHorario extends javax.swing.JInternalFrame {
    Connection conex=conexion.Conexion.conectar();
    ResultSet rs;
    private final DefaultListModel modelo1=new DefaultListModel();
    
    int idcurso,idhorario,idh;
    String horario;
    boolean disponible,band;
    
    /**
     * Creates new form Horario
     */
    public abmHorario() {
        initComponents();
    }
     @SuppressWarnings("unchecked")
    public void cargarListaHorario(){
        try {
            rs=clase.Horario.MostrarHorario(conex);
            while(rs.next()){
                modelo1.addElement(rs.getString(1));
            }
            modelo1.addElement("Nuevo Horario");
        }
        catch (Exception e){
            JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
        }
    }
    
    public void comprobar(){
        if(band==false){
            agregarBtn.setEnabled(false);
            btnborrar.setEnabled(true);
        }
        else{
            agregarBtn.setEnabled(true);
            btnborrar.setEnabled(true);
        }
    }
    
    public void comprobarCadena(){
        try{
            if(band==false){
                idhorario=clase.Horario.leerIdHorario(conex, horario);
            }
            else{
                idhorario=clase.Horario.leerIdHorario(conex, horarioTxt.getText());
            }
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
        }
    }
    
    public void clear(){
        horarioTxt.setText("");
        agregarBtn.setEnabled(false);
        btnborrar.setEnabled(false);
        jListHorario.clearSelection();
        luegoBtn.requestFocus(true);
     }
    
    public void inicio(){
        cursoHTxt.setEditable(false);
        horarioTxt.setEditable(false);
        agregarBtn.setEnabled(false);
        btnborrar.setEnabled(false);
    }
    
    public void limpiar(){
        jListHorario.clearSelection();
        btnborrar.setEnabled(false);
        cursoHTxt.requestFocus(true);
    }
    
    public void especial(){
        jListHorario.clearSelection();
        btnborrar.setEnabled(false);
    }
    
    public void especialguardar(){
        horarioTxt.setText("");
        jListHorario.clearSelection();
        luegoBtn.requestFocus(true);
    }
    
    public void desacBtn(){
        agregarBtn.setEnabled(false);
        btnborrar.setEnabled(false);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblcurso = new javax.swing.JLabel();
        lblhorario = new javax.swing.JLabel();
        cursoHTxt = new javax.swing.JTextField();
        horarioTxt = new javax.swing.JTextField();
        agregarBtn = new javax.swing.JButton();
        luegoBtn = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListHorario = new javax.swing.JList<>();
        lblhorarios = new javax.swing.JLabel();
        btnborrar = new javax.swing.JButton();

        setTitle("Agregar Horario");
        setPreferredSize(new java.awt.Dimension(370, 335));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        lblcurso.setText("Curso:");

        lblhorario.setText("Horario:");

        horarioTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                horarioTxtKeyTyped(evt);
            }
        });

        agregarBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/save_as.png"))); // NOI18N
        agregarBtn.setText("Agregar");
        agregarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarBtnActionPerformed(evt);
            }
        });

        luegoBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/close_delete_2.png"))); // NOI18N
        luegoBtn.setText("Cerrar");
        luegoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                luegoBtnActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jListHorario.setModel(modelo1);
        jListHorario.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListHorarioValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(jListHorario);

        lblhorarios.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/reloj.png"))); // NOI18N
        lblhorarios.setText("HORARIOS DISPONIBLES");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(lblhorarios, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblhorarios)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                .addContainerGap())
        );

        btnborrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/eraser.png"))); // NOI18N
        btnborrar.setText("Borrar");
        btnborrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnborrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblhorario)
                    .addComponent(lblcurso))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(luegoBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cursoHTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(horarioTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(agregarBtn)
                            .addComponent(btnborrar, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cursoHTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblcurso)
                    .addComponent(agregarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(horarioTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblhorario)
                    .addComponent(btnborrar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(luegoBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jListHorarioValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListHorarioValueChanged
        if("Nuevo Horario".equals(jListHorario.getSelectedValue())){
            comprobar();
            horario=JOptionPane.showInputDialog("Agregar Nuevo Horario"+"\n"+"Formato 00:00 a 00:00");
            try{
                idh=Horario.leerIdHorario(conex, horario);
                if(!"".equals(horario)&&horario.length()==13){
                    if(idh==0){
                        clase.Horario.insertarHorario(conex,horario,true);
                        modelo1.removeAllElements();
                        cargarListaHorario();
                        desacBtn();
                        jListHorario.clearSelection();
                    }
                    else{
                        comprobarCadena();
                        disponible=clase.Horario.leerBorrado(conex, idhorario);
                        if(disponible==false){
                            int op=JOptionPane.showConfirmDialog(this, "Este horario a sido eliminado\nDesea volver a cargarlo a la lista?");
                            switch(op){
                                case 0:
                                    clase.Horario.reinsertarHorario(conex, idhorario);
                                    modelo1.removeAllElements();
                                    cargarListaHorario();
                                    limpiar();
                                    break;
                                case 1:
                                    limpiar();
                                    break;
                                default:
                                    clear();
                                    btnborrar.setEnabled(false);
                                    break;
                            }
                        }
                        if((idh!=0)&&(disponible==true)){
                            JOptionPane.showMessageDialog(this, "Ya existe ese horario: ".concat(horario).concat(" en la lista"),"ERROR",ERROR_MESSAGE);
                            especial();
                        }
                    }
                }
                else{
                    JOptionPane.showMessageDialog(this, "No se cargo ningun horario\nRevise la sintaxis!!!","ERROR",ERROR_MESSAGE);
                    especial();
                }
            }
            catch(Exception e){
//                JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
                especial();
            }
        }
        else{
            horarioTxt.setText(jListHorario.getSelectedValue());
            comprobar();
        }
    }//GEN-LAST:event_jListHorarioValueChanged

    private void agregarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarBtnActionPerformed
        if(!"".equals(cursoHTxt.getText())&&!"".equals(horarioTxt.getText())){
            try {
                idcurso=clase.Horario.validarHorario(conex,horarioTxt.getText(),cursoHTxt.getText());
                if(idcurso==0){
                    int op=JOptionPane.showConfirmDialog(this, "Esta seguro de agregar este horario ".concat(horarioTxt.getText()).concat(" al curso ").concat(cursoHTxt.getText()).concat("?"));
                    switch(op){
                        case 0:
                            idcurso=clase.Horario.leerIdCurso(conex,cursoHTxt.getText());
                            idhorario=clase.Horario.leerIdHorario(conex, horarioTxt.getText());
                            clase.Horario.insertarCursoHorario(conex, idcurso, idhorario);
                            especialguardar();
                            break;
                        case 1:
                            luegoBtn.requestFocus(true);
                            break;
                        default:
                            especialguardar();
                            break;
                    }
                }
                else{
                    JOptionPane.showMessageDialog(this, "El curso ".concat(cursoHTxt.getText())+" ya tiene el horario ".concat(horarioTxt.getText()),"ERROR",ERROR_MESSAGE);
                    luegoBtn.requestFocus(true);
                }
            }
            catch (Exception e){
                JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
            }
        }
        else{
            if("".equals(horarioTxt.getText())){
                JOptionPane.showMessageDialog(this, "No hay un horario cargado","ERROR",ERROR_MESSAGE);
                clear();
            }
            else{
                JOptionPane.showMessageDialog(this, "No hay un curso cargado","ERROR",ERROR_MESSAGE);
                clear();
            }
        }
    }//GEN-LAST:event_agregarBtnActionPerformed

    private void luegoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_luegoBtnActionPerformed
        if(cursoHTxt.getText().isEmpty()){
            this.dispose();
        }
        else{
            abmCurso curso=new abmCurso();
            curso.cargarListaCursoHorario();
            curso.mostrarCursos();
            Dimension desktopSize=panelA.getSize();
            Dimension FrameSize=curso.getSize();
            curso.setLocation((desktopSize.width-FrameSize.width)/30,(desktopSize.height-FrameSize.height)/7);
            panelA.add(curso);
            this.dispose();
            Animacion.Animacion.mover_derecha(0 , 110, 5, 5, panelA);
            curso.show();
            curso.dniTxt.requestFocus(true);
        }
    }//GEN-LAST:event_luegoBtnActionPerformed

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        // TODO add your handling code here:
        if(cursoHTxt.getText().isEmpty()){
            band=false;
            cargarListaHorario();
            inicio();
        }
        else{
            band=true;
            cargarListaHorario();
            inicio();
        }
    }//GEN-LAST:event_formInternalFrameOpened

    private void horarioTxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_horarioTxtKeyTyped
        // TODO add your handling code here:
        char c=evt.getKeyChar();
        if(horarioTxt.getText().length()>=13){
            evt.consume();
        }
        if ((c<'0'||c>'9')&&(c==':')&&(c=='a')){
            evt.consume();
        }
    }//GEN-LAST:event_horarioTxtKeyTyped

    private void btnborrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnborrarActionPerformed
        // TODO add your handling code here:
        if(horarioTxt.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "No hay ningun horario cargado","ERROR",ERROR_MESSAGE);
            desacBtn();
        }
        else{
            int op=JOptionPane.showConfirmDialog(this, "Esta seguro de borrar el horario ".concat(horarioTxt.getText().concat("?")));
            switch(op){
                case 0:
                    try{
                        idhorario=clase.Horario.leerIdHorario(conex, horarioTxt.getText());
                        idcurso=clase.Horario.leerIdC(conex, idhorario);
                        if(idcurso==0){
                            clase.Horario.borrarHorario(conex, idhorario);
                            modelo1.removeAllElements();
                            cargarListaHorario();
                            clear();
                        }
                        else{
                            JOptionPane.showMessageDialog(this, "Uno o mas cursos dependen de este horario: ".concat(horarioTxt.getText()).concat("\n No se borro el horario de la lista"),"WARNING",WARNING_MESSAGE);
                            clear();
                        }
                    }
                    catch(Exception e){
                        JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
                    }
                    break;
                case 1:
                    cursoHTxt.requestFocus(true);
                    break;
                default:
                    clear();
                    desacBtn();
                    break;
            }
        }
    }//GEN-LAST:event_btnborrarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton agregarBtn;
    private javax.swing.JButton btnborrar;
    public javax.swing.JTextField cursoHTxt;
    private javax.swing.JTextField horarioTxt;
    private javax.swing.JList<String> jListHorario;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblcurso;
    private javax.swing.JLabel lblhorario;
    private javax.swing.JLabel lblhorarios;
    private javax.swing.JButton luegoBtn;
    // End of variables declaration//GEN-END:variables
    private static final Logger LOG = Logger.getLogger(abmHorario.class.getName());
}
